<letter>        = 'a'..'z'
                | 'A'..'Z'
                | '_'.

<digit>         = '0'..'9'.

<id>            = <letter> {<letter> | <digit>}.

<number>        = <digit> {<digit>}.

<string>        = '"' { (any character) } '"'.

<decs>          = {<dec>}.

<dec>           = <typedec>
                | <vardec>
                | <fundec>.

<typedec>       = 'type' <id> '=' <typespec>.

<typespec>      = <id>
                | '{' <fields> '}'
                | 'array' 'of' <id>

<fields>        = [<id> ':' <typespec> {',' <id> ':' <typespec> }].

<vardec>        = 'var' <id> '=' <exp>
                | 'var' <id> ':' <id> '=' <exp>
                | 'var' <id> ':' <id>.

<fundec>        = 'function' <id> '(' <fields> ')' [':' <typespec>] = <exp>.

<exp>           = <assignment>
                | <ifexp>
                | <forexp>
                | <whileexp>
                | <break>

<ifexp>         = 'if' <exp> 'then' <exp> [ 'else' <exp> ].

<forexp>        = 'for' <id> := <exp> 'to' <exp> 'do' <exp>.

<whileexp>      = 'while' <exp> 'do' <exp>.

<break>         = 'break'.

<assignment>    = <disjunction> [ ':=' <exp> ].

<disjunction>   = <conjunction>
                | <disjunction> '|' <conjunction>.

<conjunction>   = <boolean>
                | <conjunction> '&' <boolean>.
                
<boolean>       = <sum> [ <relop> <sum> ].

<relop>         = '='
                | '<>'
                | '<'
                | '<='
                | '>'
                | '>='.
                
<sum>           = <product>
                | <sum> <addop> <product>.

<addop>         = '+'
                | '-'.

<product>       = <factor>
                | <product> <mulop> <factor>.

<mulop>         = '*'
                | '/'.
                
<factor>        = <call>
                | <lvalue>
                | <object>
                | <array>
                | 'nil'
                | 'true'
                | 'false'
                | '(' <exp> { ';' <exp> } ')'
                | <number>
                | <string>
                | '-' <factor>.

<call>          = <id> '(' <exp> { ',' <exp> } ')'.

<lvalue>        = <id> { '.' <id> | '[' <exp> ']' }.

<array>         = <id> '[' <exp> ']' of <exp>

<object>        = '{' <attribute> { ',' <attribute } '}'.

<attribute>     = <id> '=' <exp>.
